import os
import json
import logging
import feedparser
import openai
import html
import threading
import pytz
import time
from datetime import datetime
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot, InputMediaPhoto
from dotenv import load_dotenv
from smartgen import generate_smart_reaction

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL = os.getenv("TELEGRAM_CHANNEL", "@yourchannel")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)

# Flask –¥–ª—è Render
app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is alive!"

# –ù–æ–≤–æ—Å—Ç–∏
FEEDS = [
    "http://feeds.bbci.co.uk/news/world/rss.xml",
    "http://rss.cnn.com/rss/edition.rss",
    "https://www.aljazeera.com/xml/rss/all.xml",
    "http://feeds.reuters.com/reuters/topNews",
    "https://www.theguardian.com/world/rss",
    "https://www.france24.com/en/rss",
    "https://www.dw.com/en/top-stories/s-9097?maca=en-rss-en-all-1573-rdf",
    "https://www3.nhk.or.jp/nhkworld/en/news/feed/rss.xml"
]

posted_titles = set()

def translate_to_russian(text):
    try:
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {text}"
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.7
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.warning(f"Translation failed: {e}")
        return text

def fetch_and_post_news():
    global posted_titles
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–µ–Ω—Ç...")
    for feed_url in FEEDS:
        logging.info(f"üì∞ –ß—Ç–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã: {feed_url}")
        feed = feedparser.parse(feed_url)
        if not feed.entries:
            logging.warning(f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–µ–Ω—Ç–µ: {feed_url}")
            continue
        for entry in feed.entries[:3]:
            title = translate_to_russian(entry.title)
            summary = translate_to_russian(entry.summary)
            url = entry.link

            logging.info(f"üìå –ù–æ–≤–æ—Å—Ç—å: {title}")

            if title in posted_titles:
                logging.info("‚è© –£–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            reaction_json = generate_smart_reaction(title, summary)
            if not reaction_json:
                logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é")
                continue

            try:
                reaction = json.loads(reaction_json)
                annotation = reaction.get("annotation", "")
                meme_text = reaction.get("meme_text", "")
                category = reaction.get("category", "")
                logging.info(f"üß† –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: {annotation}")
                logging.info(f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            except Exception as e:
                logging.warning(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –æ—Ç smartgen: {e}")
                annotation = ""
                meme_text = ""
                category = ""

            caption = ""
            caption += f"<b>üì∞ {html.escape(title)}</b>\n\n"
            if annotation:
                caption += f"{html.escape(annotation)}\n\n"
            caption += f"üìé <a href='{url}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n"
            if category:
                caption += f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>{html.escape(category)}</i>\n"
            if meme_text:
                caption += f"ü§° –ú–µ–º: <i>{html.escape(meme_text)}</i>"

            try:
                bot.send_message(chat_id=CHANNEL, text=caption, parse_mode='HTML', disable_web_page_preview=False)
                posted_titles.add(title)
                logging.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
scheduler.add_job(fetch_and_post_news, "interval", minutes=10)

# Flask –∏ –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
def run_flask():
    app.run(host="0.0.0.0", port=10000)

if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    scheduler.start()
    while True:
        time.sleep(60)