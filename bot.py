import os
import logging
import json
import random
import feedparser
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, Updater
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv
import pytz
import openai

load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL = os.getenv("CHANNEL_USERNAME")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = telegram.Bot(token=TOKEN)
logging.basicConfig(level=logging.INFO)

FEEDS = [
    "https://lenta.ru/rss",
    "https://www.kommersant.ru/RSS/news.xml",
    "https://www.rbc.ru/static/rss/news.rss"
]

DB_PATH = "reactions_db.json"

CATEGORY_KEYWORDS = {
    "–ü–æ–ª–∏—Ç–∏–∫–∞": ["–ø—É—Ç–∏–Ω", "—Å–∞–Ω–∫—Ü–∏–∏", "–≥–æ—Å–¥—É–º–∞", "–º–µ—Ä—Ü", "–∑–∞–∫–æ–Ω", "–±–∞–π–¥–µ–Ω"],
    "–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è": ["–≤–∑—Ä—ã–≤", "—É–±–∏–π—Å—Ç–≤–æ", "–ø–æ–∂–∞—Ä", "—Ç–µ—Ä–∞–∫—Ç", "–î–¢–ü", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞"],
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞": ["–∫—É—Ä—Å", "–Ω–µ—Ñ—Ç—å", "–≥–∞–∑", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–¥–æ–ª–ª–∞—Ä", "–∏–Ω—Ñ–ª—è—Ü–∏—è"],
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["–ò–ò", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Å—Ç–∞—Ä—Ç–∞–ø", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ä–æ—Å–∫–æ—Å–º–æ—Å"]
}

REGIONS = {
    "–ú–æ—Å–∫–≤–∞": ["–º–æ—Å–∫–≤–∞", "–º–æ—Å–∫–æ–≤—Å–∫–∏–π", "–º–æ—Å–∫–≤–µ"],
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "—Å–ø–±", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥"],
    "–°–∏–±–∏—Ä—å": ["–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "—Ç–æ–º—Å–∫", "–æ–º—Å–∫", "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"],
    "–£—Ä–∞–ª": ["–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "—á–µ–ª—è–±–∏–Ω—Å–∫", "–ø–µ—Ä–º—å", "—É—Ä–∞–ª"],
    "–ö–∞–≤–∫–∞–∑": ["–¥–∞–≥–µ—Å—Ç–∞–Ω", "—á–µ—á–Ω—è", "–≥—Ä–æ–∑–Ω—ã–π", "–∫–∞–≤–∫–∞–∑"],
    "–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫": ["–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "—Ö–∞–±–∞—Ä–æ–≤—Å–∫", "—Å–∞—Ö–∞–ª–∏–Ω", "–¥–∞–ª—å–Ω–∏–π –≤–æ—Å—Ç–æ–∫"]
}

INTERESTING_KEYWORDS = [
    "–≤–∑–æ—Ä–≤–∞–ª", "–æ–±—Ä—É—à–∏–ª", "–∑–∞–ø—Ä–µ—Ç–∏–ª", "–≤–≤—ë–ª", "–æ–±—ä—è–≤–∏–ª", "–∞—Ä–µ—Å—Ç", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞",
    "—Å–µ–Ω—Å–∞—Ü–∏—è", "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ", "—Ä–µ–∫–æ—Ä–¥", "–≤–ø–µ—Ä–≤—ã–µ", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ"
]

PROMPTS = [
    "–ü—Ä–∏–¥—É–º–∞–π –∏—Ä–æ–Ω–∏—á–Ω—É—é, —É–º–Ω—É—é –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: \"{title}\"",
    "–°–¥–µ–ª–∞–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –±—É–¥—Ç–æ –Ω–æ–≤–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∞–±—Å—É—Ä–¥: \"{title}\"",
    "–ï—Å–ª–∏ –±—ã —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –æ–±—Å—É–∂–¥–∞–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∫–∞–∫ –±—ã –∑–≤—É—á–∞–ª —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç: \"{title}\"",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—É–±–ª–∏–∫—É–µ—à—å —ç—Ç–æ –≤ Telegram —Å –∫–æ–ª–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: \"{title}\"",
    "–ù–∞–ø–∏—à–∏ –º–µ–º–Ω—ã–π, –º–µ—Ç–∫–∏–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –Ω–æ–≤–æ—Å—Ç–∏: \"{title}\""
]

posted_titles = set()

def extract_image(entry):
    media_content = entry.get('media_content', [])
    if media_content and 'url' in media_content[0]:
        return media_content[0]['url']
    if 'links' in entry:
        for link in entry.links:
            if link.type and link.type.startswith("image/"):
                return link.href
    return None

def detect_category(text):
    text = text.lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(kw in text for kw in keywords):
            return category
    return "–û–±—â–µ—Å—Ç–≤–æ"

def detect_region(text):
    text = text.lower()
    for region, keywords in REGIONS.items():
        if any(kw in text for kw in keywords):
            return region
    return "–†–æ—Å—Å–∏—è"

def is_interesting(title):
    lower_title = title.lower()
    return any(word in lower_title for word in INTERESTING_KEYWORDS)

def fetch_news():
    news_items = []
    for feed_url in FEEDS:
        feed = feedparser.parse(feed_url)
        for entry in feed.entries:
            title = entry.title.strip()
            if title in posted_titles or not is_interesting(title):
                continue
            posted_titles.add(title)
            news_items.append({
                "title": title,
                "summary": entry.summary.strip() if hasattr(entry, "summary") else "",
                "image": extract_image(entry),
            })
    return news_items[:1]

    except Exception as e:
        logging.warning(f"OpenAI error: {e}")
        return "ü§î –ù—É –∏ –Ω—É..."

def generate_meme_idea(title):
    try:
        prompt = (
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è —Å–º–µ—à–Ω–æ–≥–æ –º–µ–º–∞. "
            f"–û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫—É—é —Å—Ü–µ–Ω—É –∏–ª–∏ —à–∞–±–ª–æ–Ω –º–µ–º–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –∫–∞–∫–∞—è –Ω–∞–¥–ø–∏—Å—å –±—É–¥–µ—Ç.\n"
            f"–ù–æ–≤–æ—Å—Ç—å: \"{title}\""
        )
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=80,
            temperature=0.95
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.warning(f"OpenAI meme idea error: {e}")
        return ""

def create_caption(item):
    category = detect_category(item['title'])
    region = detect_region(item['title'] + " " + item['summary'])
    emoji = {
        "–ü–æ–ª–∏—Ç–∏–∫–∞": "üì£",
        "–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è": "üö®",
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "ü§ñ",
        "–û–±—â–µ—Å—Ç–≤–æ": "üì∞"
    }.get(category, "üì∞")

    comment = generate_comment(item['title'])
    meme = generate_meme_idea(item['title'])
    promo = generate_promo(item['title'])

    caption_parts = [
        f"{emoji} <b>[{category} | {region}]</b>",
        item['title'],
        f"üß† <i>{comment}</i>"
    ]
    if meme:
        caption_parts.append(f"üí¨ <i>–ò–¥–µ—è –¥–ª—è –º–µ–º–∞:</i> {meme}")
    if promo:
        caption_parts.append(promo)

    caption = "

".join(caption_parts)
    return caption

def load_db():
    if not os.path.exists(DB_PATH):
        return {}
    with open(DB_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_db(data):
    with open(DB_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def post_digest(context=None):
    news = fetch_news()
    if not news:
        logging.info("No fresh news.")
        return

    db = load_db()

    for item in news:
        caption = create_caption(item)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç", callback_data="like"),
             InlineKeyboardButton("üòÇ", callback_data="funny"),
             InlineKeyboardButton("üò°", callback_data="angry")]
        ])
        try:
            msg = None
            if item['image']:
                msg = bot.send_photo(chat_id=CHANNEL, photo=item['image'], caption=caption,
                                     parse_mode=telegram.ParseMode.HTML, reply_markup=keyboard)
            else:
                msg = bot.send_message(chat_id=CHANNEL, text=caption,
                                       parse_mode=telegram.ParseMode.HTML, reply_markup=keyboard)

            if msg:
                db[str(msg.message_id)] = {
                    "title": item['title'],
                    "likes": 0,
                    "funny": 0,
                    "angry": 0
                }
                save_db(db)

        except Exception as e:
            logging.error(f"Error posting news: {e}")

def handle_reaction(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    reaction = query.data
    message_id = str(query.message.message_id)

    db = load_db()
    if message_id in db:
        db[message_id][reaction] += 1
        save_db(db)

    reaction_responses = {
        "like": ["üî• –í–æ—Ç —ç—Ç–æ –∑–∞—à–ª–æ!", "üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", "üôå –†–∞–¥, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!"],
        "funny": ["üòÇ –ù—É —Ö–æ—Ç—å –ø–æ–≤–µ—Å–µ–ª–∏–ª–∏!", "–Æ–º–æ—Ä –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ—á–∫–µ üòÖ", "–•–∞-—Ö–∞, –¥–∞, –∞–±—Å—É—Ä–¥!"],
        "angry": ["üò° –°–æ–≥–ª–∞—Å–µ–Ω, –±–µ—Å–∏—Ç!", "ü§¨ –≠—Ç–æ —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä...", "–ë–æ–º–±–∏—Ç –Ω–µ –ø–æ-–¥–µ—Ç—Å–∫–∏ üò§"]
    }

    text = random.choice(reaction_responses.get(reaction, ["–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é!"]))
    try:
        query.message.reply_text(text)
    except Exception as e:
        logging.warning(f"Could not send reaction message: {e}")

def post_top_news():
    db = load_db()
    scored = []

    for msg_id, data in db.items():
        total = data.get("likes", 0) + data.get("funny", 0) + data.get("angry", 0)
        if total > 0:
            scored.append({
                "title": data["title"],
                "likes": data["likes"],
                "funny": data["funny"],
                "angry": data["angry"],
                "score": total
            })

    top_news = sorted(scored, key=lambda x: x["score"], reverse=True)[:3]
    if not top_news:
        return

    message = "üèÜ <b>–¢–æ–ø-3 –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –¥–µ–Ω—å:</b>\n"
    medals = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]
    for i, item in enumerate(top_news):
        message += f"\n{medals[i]} {item['title']} ‚Äî üëç{item['likes']} üòÇ{item['funny']} üò°{item['angry']}"
    bot.send_message(chat_id=CHANNEL, text=message, parse_mode=telegram.ParseMode.HTML)

def start_bot():
    scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))
    scheduler.add_job(post_digest, "interval", minutes=7)
    scheduler.add_job(post_top_news, "cron", hour=21, minute=0)
    scheduler.add_job(post_partner_promo, "cron", hour=14, minute=0)
    scheduler.start()

    updater = Updater(TOKEN, use_context=True)
    updater.dispatcher.add_handler(CallbackQueryHandler(handle_reaction))
    updater.dispatcher.add_handler(CommandHandler("start", handle_start))
    updater.dispatcher.add_handler(CommandHandler("ref", handle_ref))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    post_digest()
    start_bot()

def generate_promo(title):
    try:
        prompt = (
            f"–°–¥–µ–ª–∞–π 3-5 —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–æ–Ω—Å (–¥–æ 15 —Å–ª–æ–≤) –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏. "
            f"–§–æ—Ä–º–∞—Ç: –ê–Ω–æ–Ω—Å\n#—Ö–µ—à—Ç–µ–≥1 #—Ö–µ—à—Ç–µ–≥2 ...\n\n–ù–æ–≤–æ—Å—Ç—å: {title}"
        )
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=70,
            temperature=0.9
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.warning(f"OpenAI promo generation error: {e}")
        return ""

REF_DB_PATH = "ref_db.json"

def load_ref_db():
    if not os.path.exists(REF_DB_PATH):
        return {}
    with open(REF_DB_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_ref_db(data):
    with open(REF_DB_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def handle_start(update: Update, context: CallbackContext):
    user = update.effective_user
    args = context.args
    referrer_id = args[0] if args else None

    ref_db = load_ref_db()
    if referrer_id and referrer_id != str(user.id):
        if referrer_id not in ref_db:
            ref_db[referrer_id] = {"invited": [], "joined": 0}
        if str(user.id) not in ref_db[referrer_id]["invited"]:
            ref_db[referrer_id]["invited"].append(str(user.id))
            ref_db[referrer_id]["joined"] += 1
            save_ref_db(ref_db)

    welcome = "–ü—Ä–∏–≤–µ—Ç! üëã –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–º–Ω–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞.
"
    welcome += "–•–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã? –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π:
"
    welcome += f"https://t.me/{context.bot.username}?start={user.id}"
    update.message.reply_text(welcome)

def handle_ref(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    ref_db = load_ref_db()
    if user_id in ref_db:
        invited = ref_db[user_id]["joined"]
        update.message.reply_text(f"–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {invited} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üéâ")
    else:
        update.message.reply_text("–¢—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª üòî")

COMMENT_PROMPTS = [
    "–ù–∞–ø–∏—à–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—É—é, –∏—Ä–æ–Ω–∏—á–Ω—É—é –∏–ª–∏ –∞–±—Å—É—Ä–¥–Ω—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∫ –Ω–æ–≤–æ—Å—Ç–∏: \"{title}\"",
    "–ö–∞–∫ –±—ã —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –æ–±—Å—É–¥–∏–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –Ω–∞ –∑–ª–æ–±–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ? \"{title}\"",
    "–ï—Å–ª–∏ –±—ã —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –ø—É–±–ª–∏–∫–æ–≤–∞–ª —Ç—Ä–æ–ª–ª—å ‚Äî —á—Ç–æ –±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª? \"{title}\"",
    "–ù–∞–ø–∏—à–∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –≤ —Å—Ç–∏–ª–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–∞—Ä–∫–∞–∑–º–∞: \"{title}\"",
    "–í—ã—Å–º–µ–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏—Ä–æ–Ω–∏–µ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –∞–≤—Ç–æ—Ä —Å–∞—Ç–∏—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞: \"{title}\""
]

def generate_comment(title):
    try:
        prompt = random.choice(COMMENT_PROMPTS).format(title=title)
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=70,
            temperature=1.0
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.warning(f"OpenAI comment generation error: {e}")
        return "ü§î –ù—É –∏ –Ω—É..."

def post_partner_promo():
    try:
        with open("partners.json", "r", encoding="utf-8") as f:
            partners = json.load(f)
        if not partners:
            return
        partner = random.choice(partners)
        promo_text = partner["text"]
        bot.send_message(chat_id=CHANNEL, text=promo_text)
    except Exception as e:
        logging.warning(f"Partner promo error: {e}")